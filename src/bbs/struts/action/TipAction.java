/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package bbs.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;

import bbs.biz.BoardBiz;
import bbs.biz.ReplyBiz;
import bbs.biz.TopicBiz;
import bbs.biz.UserBiz;
import bbs.entity.Reply;
import bbs.entity.Topic;
import bbs.entity.User;
import bbs.struts.form.TipForm;

public class TipAction extends DispatchAction {
	ActionMessages errors = new ActionMessages();
	
	public ActionForward doNewTopic(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) {
		TipForm tipForm = (TipForm)form;
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("LoginedUser");
		Topic topic = tipForm.getTopic();
		topic.setBoardId(tipForm.getBoard().getBoardId());
		topic.setUserId(user.getUserId());		
		TopicBiz topicBiz = new TopicBiz();
		
		if (topicBiz.addTopic(topic)) {
			errors.clear();
			errors.add("TipInfo",new ActionMessage("info.tip.success"));
			super.saveErrors(request, errors);
			return mapping.findForward("doTopicList");
			
		}		
			errors.clear();
			errors.add("TipInfo",new ActionMessage("error.tip.newTopic"));
			super.saveErrors(request, errors);
			return mapping.findForward("toNewTip");
	}
	
	public ActionForward doNewReply(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			TipForm tipForm = (TipForm) form;
			HttpSession session = request.getSession();
		User user = (User) session.getAttribute("LoginedUser");
		Reply reply = tipForm.getReply();
		reply.setTopicId(tipForm.getTopic().getTopicId());
		reply.setUserId(user.getUserId());
		ReplyBiz replyBiz = new ReplyBiz();

		if (replyBiz.addReply(reply)) {
			errors.clear();
			errors.add("TipInfo", new ActionMessage("info.tip.success"));
			super.saveErrors(request, errors);
			return mapping.findForward("doTopicDetail");
		}
		errors.clear();
		errors.add("TipInfo", new ActionMessage("error.tip.newReply"));
		super.saveErrors(request, errors);
		return mapping.findForward("toNewTip");
		}
	
	public ActionForward toNewTip(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipForm tipForm = (TipForm) form;
		
		BoardBiz boardBiz = new BoardBiz();
		tipForm.setBoard(boardBiz.findBoardById(tipForm.getBoard().getBoardId()));		
		
		if (tipForm.getTopic().getTopicId()!=-1) {
			TopicBiz topicBiz = new TopicBiz();
			tipForm.setTopic(topicBiz.findTopicById(tipForm.getTopic().getTopicId()));
		}
			return mapping.findForward("toNewTip");
	}
	
	public ActionForward doDeleteTip(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) {
		TipForm tipForm = (TipForm) form;
		
		try {
			request.setCharacterEncoding("GBK");
			response.setCharacterEncoding("GBK");
			
			int topicId = tipForm.getTopic().getTopicId();
			int replyId = tipForm.getReply().getReplyId();
			
			if(replyId == -1){
				TopicBiz topicBiz = new TopicBiz();
				if(topicBiz.deleteTopic(topicId)){
					errors.clear();
					errors.add("TipInfo",new ActionMessage("info.tip.success"));
					super.saveErrors(request, errors);
					return mapping.findForward("doTopicList");
				}else {
					errors.clear();
					errors.add("TipInfo",new ActionMessage("error.tip.deleteTopic"));
					super.saveErrors(request, errors);
					return mapping.findForward("toTopicDetail");
				}
			}else{
				ReplyBiz replyBiz = new ReplyBiz();
				if(replyBiz.deleteReply(replyId)){
					errors.clear();
					errors.add("TipInfo",new ActionMessage("info.tip.success"));
					super.saveErrors(request, errors);
					return mapping.findForward("doTopicDetail");
				}else {
					errors.clear();
					errors.add("TipInfo",new ActionMessage("error.tip.modifyReply"));
					super.saveErrors(request, errors);
					return mapping.findForward("toTopicDetail");
				}
				
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public ActionForward doModifyReply(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
			TipForm tipForm = (TipForm) form;
			
			ReplyBiz replyBiz = new ReplyBiz();
			
			if (replyBiz.updateReply(tipForm.getReply())) {
				errors.clear();
				errors.add("TipInfo",new ActionMessage("info.tip.success"));
				super.saveErrors(request, errors);
				return mapping.findForward("doTopicDetail");
			}else{
				errors.clear();
				errors.add("TipInfo",new ActionMessage("error.tip.modifyReply"));
				super.saveErrors(request, errors);
				return mapping.findForward("doTopicDetail");
			}
		}
	
	public ActionForward toModifyReply(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipForm tipForm = (TipForm) form;

		
		BoardBiz boardBiz = new BoardBiz();		
		TopicBiz topicBiz = new TopicBiz();		
		ReplyBiz replyBiz = new ReplyBiz();
		
		tipForm.setBoard(boardBiz.findBoardById(tipForm.getBoard().getBoardId()));
		tipForm.setReply(replyBiz.findReplyById(tipForm.getReply().getReplyId()));
		tipForm.setTopic(topicBiz.findTopicById(tipForm.getTopic().getTopicId()));
		
		return mapping.findForward("toModifyReply");
		
	}
	
	public ActionForward toTopicDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipForm tipForm = (TipForm) form;
		
		int boardId = tipForm.getBoard().getBoardId();
		int topicId = tipForm.getTopic().getTopicId();
		int page = tipForm.getPage();
		
		BoardBiz boardBiz = new BoardBiz();
		TopicBiz topicBiz = new TopicBiz();
		ReplyBiz replyBiz = new ReplyBiz();
		UserBiz userBiz = new UserBiz();
				
		Topic topic = topicBiz.findTopicById(topicId);
		
		tipForm.setBoard(boardBiz.findBoardById(boardId));
		tipForm.setTopic(topic);
		tipForm.setPageCount((replyBiz.findCountReply(topicId)+9)/10);		
		
		request.setAttribute("topicUser",userBiz.findUserByUserId(topic.getUserId()));
		request.setAttribute("replyList", replyBiz.findReplyList(page, topicId));
		
		return mapping.findForward("toTopicDetail");
	}
	
	public ActionForward toTopicList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TipForm tipForm = (TipForm) form;
		
		int boardId = tipForm.getBoard().getBoardId();		
		int page = tipForm.getPage();	
		
		BoardBiz boardBiz = new BoardBiz();
		TopicBiz topicBiz = new TopicBiz();
		
		tipForm.setBoard(boardBiz.findBoardById(boardId));
		tipForm.setPageCount((topicBiz.findCountTopic(boardId)+9)/10);
		request.setAttribute("topicList", topicBiz.findTopicList(page, boardId));
		
		return mapping.findForward("toTopicList");
	}

}